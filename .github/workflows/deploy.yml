name: Build and Deploy to IPFS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # Allow manual triggering

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      run: |
        echo "Checking out repository..."
        git clone https://github.com/${{ github.repository }}.git .
        git checkout ${{ github.sha }}
        echo "Repository checked out successfully"
    
    - name: Setup Node.js
      run: |
        echo "Setting up Node.js..."
        curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
        sudo apt-get install -y nodejs
        node --version
        npm --version
        echo "Node.js setup complete"
    
    - name: Install dependencies
      run: |
        echo "Installing dependencies..."
        npm install
        echo "Dependencies installed"
    
    - name: Run tests
      run: |
        echo "Running tests..."
        npm test || echo "Tests completed (some may have failed)"
    
    - name: Build application
      run: |
        echo "Building application..."
        npm run build
        echo "Build completed"
    
    - name: List build contents
      run: |
        echo "Build directory contents:"
        ls -la build/
        echo "Build verification:"
        [ -f build/index.html ] && echo "✅ index.html found" || echo "❌ index.html missing"
        [ -f build/health.json ] && echo "✅ health.json found" || echo "❌ health.json missing"
    
    # Updated pinning section for your remote service
    - name: Deploy to Remote IPFS Pinning Service
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        echo "📤 Deploying to remote IPFS pinning service..."
        
        # Verify build directory
        echo "🔍 Verifying build directory..."
        ls -la build/
        [ -f build/index.html ] || (echo "❌ index.html missing" && exit 1)
        
        # Create a tarball of the build
        echo "📦 Creating archive..."
        tar -czf build.tar.gz -C build .
        FILE_SIZE=$(du -h build.tar.gz | cut -f1)
        echo "📦 Archive created: $FILE_SIZE"
        
        # Upload to your IPFS node using the HTTP API
        echo "🚀 Uploading to IPFS node..."
        RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" \
          -F "file=@build.tar.gz" \
          "https://shlakotzone.duckdns.org/api/v0/add?pin=true&quieter=true" \
          --max-time 300)
        
        HTTP_CODE=$(echo "$RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
        RESPONSE_BODY=$(echo "$RESPONSE" | sed 's/HTTP_CODE:[0-9]*$//')
        
        echo "📊 Upload response:"
        echo "  - HTTP Code: $HTTP_CODE"
        echo "  - Response: $RESPONSE_BODY"
        
        if [ "$HTTP_CODE" != "200" ]; then
          echo "❌ Upload failed with HTTP $HTTP_CODE"
          echo "Response: $RESPONSE_BODY"
          exit 1
        fi
        
        # Extract the IPFS hash from response
        IPFS_HASH=$(echo "$RESPONSE_BODY" | grep -o '"Hash":"[^"]*"' | head -1 | cut -d'"' -f4)
        
        if [ -z "$IPFS_HASH" ]; then
          echo "❌ Could not extract IPFS hash from response"
          echo "Full response: $RESPONSE_BODY"
          exit 1
        fi
        
        echo "✅ Successfully added to IPFS: $IPFS_HASH"
        echo "🌐 Primary URL: https://shlakotzone.duckdns.org/ipfs/$IPFS_HASH"
        
        # Pin the content (in case pin=false was used)
        echo "📌 Ensuring content is pinned..."
        PIN_RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" \
          -X POST "https://shlakotzone.duckdns.org/api/v0/pin/add?arg=$IPFS_HASH" \
          --max-time 30)
        
        PIN_HTTP_CODE=$(echo "$PIN_RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
        PIN_RESPONSE_BODY=$(echo "$PIN_RESPONSE" | sed 's/HTTP_CODE:[0-9]*$//')
        
        if [ "$PIN_HTTP_CODE" = "200" ]; then
          echo "✅ Content pinned successfully"
        else
          echo "⚠️ Pinning failed with HTTP $PIN_HTTP_CODE: $PIN_RESPONSE_BODY"
        fi
        
        # Save hash for summary
        echo "IPFS_HASH=$IPFS_HASH" >> $GITHUB_ENV
    
    - name: Create deployment summary
      if: env.IPFS_HASH != '' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      run: |
        echo "## 🚀 Deployment Successful" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**IPFS Hash:** \`$IPFS_HASH\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Primary Access URL:**" >> $GITHUB_STEP_SUMMARY
        echo "- [Your IPFS Gateway](https://shlakotzone.duckdns.org/ipfs/$IPFS_HASH)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Alternative Access (Public Gateways):**" >> $GITHUB_STEP_SUMMARY
        echo "- [ipfs.io](https://ipfs.io/ipfs/$IPFS_HASH)" >> $GITHUB_STEP_SUMMARY
        echo "- [dweb.link](https://dweb.link/ipfs/$IPFS_HASH)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Note:** Content is pinned on your remote IPFS node for persistent availability" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment Time:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** Pinned and accessible via your domain" >> $GITHUB_STEP_SUMMARY
    
    - name: Cleanup
      if: always()
      run: |
        rm -f build.tar.gz || true
        echo "🧹 Cleanup completed"